'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setError = undefined;

var _ajv = require('ajv');

var _ajv2 = _interopRequireDefault(_ajv);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var setError = function setError(error, schema) {
    var dataPathParts = error.dataPath.split('/').slice(1);
    var dataPath = error.dataPath.slice(1).replace(/\//g, '.');

    var type = findTypeInSchema(schema, dataPathParts);

    var errorToSet = void 0;
    if (type === 'array') {
        errorToSet = { _error: error.message };
    } else {
        errorToSet = error.message;
    }

    var errors = {};
    _lodash2.default.set(errors, dataPath, errorToSet);
    return errors;
};

var findTypeInSchema = function findTypeInSchema(schema, dataPath) {
    if (dataPath.length == 0) {
        return schema.type;
    } else {
        if (schema.type === 'array') {
            return findTypeInSchema(schema.items, dataPath.slice(1));
        } else {
            return findTypeInSchema(schema.properties[dataPath[0]], dataPath.slice(1));
        }
    }
};

var buildSyncValidation = function buildSyncValidation(schema) {
    var ajvParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var ajv = ajvParam;
    if (ajv === null) {
        ajv = new _ajv2.default({ errorDataPath: 'property', allErrors: true, jsonPointers: true });
    }
    return function (values) {
        var valid = ajv.validate(schema, values);
        if (valid) {
            return {};
        }
        var ajvErrors = ajv.errors;

        var errors = ajvErrors.map(function (error) {
            return setError(error, schema);
        });
        // We need at least two elements
        errors.push({});
        errors.push({});
        return _deepmerge2.default.all(errors);
    };
};

exports.default = buildSyncValidation;
exports.setError = setError;